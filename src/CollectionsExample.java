import java.util.*;

public class CollectionsExample {

    //psvm[Tab]
    public static void main(String[] args) {
        /*создадим список, ArrayList
        список будет хранить строки, поэтому
        тип надо записать так: ArrayList<String>.
        В коллекциях при указании типа в угловых скобках
        мы пишем тип элементов.
        Замечание. В очень старых версиях java угловых
        скобок не было, поэтому java разрешает их не писать,
        но вы обязательно пишите.
        */

        ArrayList<String> l1 = new ArrayList<String>();
        ArrayList<String> l2 = new ArrayList<>();
        //алмазик <> означает, что и так понятно, какой тип
        //но писать его нужно.

        List<String> l3 = new ArrayList<>();
        //l3 - это переменная для хранения списков.
        //в нее можно записать ArrayList.
        //
        //Animal a = new Cat();  ???Cat c = new Animal()
        //Это рекомендуемый способ создания списков.

        Collection<String> l4 = new ArrayList<>();

        //В 10-Java
        //var l5 = new ArrayList<String>();

        l3.add("hello");
        l3.add("cat");
        l3.add("abc");
        //в отличие от массивов, коллекции можно распечатать
        System.out.println(l3);
        for (String s : l3) // iter[Tab]
            System.out.println(s);     // sout[Tab]

        System.out.println(l3.get(2)); //abc 0,1,2
        l4.add("xyz");
        // System.out.println(l4.get(2)); //l4 - it is Collection

        //Вспомогательные классы Collecrions и Arrays
        //(!) s на конце
        List<String> l5 = Arrays.asList("aa", "bb", "cc");
        //создаём список из указанного набора элементов
        //asList возвращает неизменяемый список
        //l5.add("dd"); возникает ошибка при запуске
        String[] s = {"xx", "yy", "zz"};
        List<String> l6 = Arrays.asList(s);
        //т.е. либо массив, либо перечислить элементы

        List<String> l7 = Collections.nCopies(10, "asdf");
        //это список из 10 одинаковых значений.
        //тоже неизменяемый
        //Collections.[Ctrl + Space] и ищите кучу функций

    }

    /*
    Коллекции хранят набор элементов. По сравнению с массивами
    коллекции поддерживают намного больше операций.
    Достоинства массива: использует меньше памяти, чем коллекция,
    базовые операции выполняются очень быстро.

    Коллекции бывают разных видов. Основные виды: списки (List)
    и множества (Set). Коллекции различаются набором допустимых
    операций.
    List - имеется порядок на элементах, т.е. всегда можно
    обратиться к элементу по его номеру. Например, можно
    обратиться к первому элементу списка.
    Set - хранит элементы не более одного раза. (List может
    сохранить одно и то же несколько раз).

    Операции, которые есть во всех коллекциях:
    Допустим, c, c1 - это коллекции.
    c.add(x) - добавить элемент в коллекцию. У списков элемент
    всегда добавляется в конец. Возвращает boolean, добавился
    ли элемент.

    c.addAll(c1) добавить в коллекцию c все элементы коллекции c1
    c.clear() - очистить коллекцию
    c.contains(x): boolean, содержит ли коллекция элемент x
                  В множествах эта операция обычно работает
                  очень быстро.
    c.containsAll(c1): boolean         Ctrl + Q
    c.isEmpty() пустая ли коллекция
    c.remove(x) удалить элемент
    c.removeAll(x)
    (!)c.size()         array.length; "abc".length()
                        c.size()
    c.                Ctrl + Space автодополнение

    перебор элементов циклом for!
    for (типэлемента x in c)
        действие с элементом x

    В списках действий больше.

    l - список, тогда:
    l.add(index, x) - добавить в указанное место
    l.remove(index) - удалить элемент по индексу
    l.get(index) - получить элемент по номеру.  l[index]

    l.subList(from, to)

    Виды списков.
    ArrayList, LinkedList.
    ArrayList хранит данные внутри массива.
    LinkedList хранит данные в виде двусвязного списка.
    отличаются памятью (ArrayList требует меньше памяти)
    и скоростью выполнения операций.
    Например, операция l.remove(0) - удалить 0ой элемент списка
    в ArrayList работает медленно.
    В 99% ArrayList подходит лучше, чем LinkedList

    Виды множеств:
    HashSet, TreeSet, LinkedHashSet
    отличаются используемыми структурами данных, т.е. тем, как
    элементы множеств хранятся внутри.
    На практике отличие в порядке перебора элементов.

    for (тип x in set)

    в HashSet элементы перебираются в неопределенном порядке.
    Это множество работает быстрее всех других, поэтому, если
    вам не важен порядок перебора элементов, то пользуйтесь
    HashSet.

    TreeSet - перебирает элементы по возрастанию.
    set.add(2);
    set.add(3);
    set.add(1);

    при переборе вы получите 1, 2, 3

    А в случае строк, они переберуться в алфавитном порядке.

    LinkedHashSet - перебирает элементы в порядке добавления.

    Итого. Если нужен список, выбирайте ArrayList
           Если нужно множество, выбирайте HashSet, или
           другое, если важен порядок перебора.

    Создание коллекций. см. код
    */
}
