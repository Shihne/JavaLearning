package objects.inheritance;

/*
Ключевое слово extends означает, что
1) класс Cat расширяет класс Animal
2) Cat - наследник Animal
3) Cat - частный случай Animal

Если сделать extends, то все поля и методы базового (родительского)
класса (от которого унаследовались), переходят в класс потомок.
 */

public class Cat extends Animal {
    //поле name, метод getName, метод getSound, ...
    //(интересный эффект, поле name есть в классе Cat, но
    // с ним ничего нельзя делать, потому что оно приватное.
    // если всё-таки хочется узнать name, то можно использовать
    // get Name.
    // С прошлого раза вспомните модификатор доступа protected.
    // поле или метод доступно только в потомке.

    public Cat() {
        super("Мурзик"); //вызов конструктора базового класса
        //вызов делает ключевое слово super, оно должно быть
        //первым в конструкторе.

        System.out.println("nya");
    }

    public Cat(String name) {
        super(name); //вызвать конструктор базового класса
    }

    //можно добавлять новые поля и методы

    private int miceCount = 0; //сколько поймано мышей
    public void catchAMouse() {
        System.out.println(getSound() + ", " + miceCount);
    }

    //еще можно переопределять старые методы
    //для этого нужно в точности повторить заголовок метода.

    //это переопределение, а не новый метод
    //overriding
    @Override
    public String getSound() {
        return "Nyaa";
    }
    //аннотация @Override перед методом не обязательна, но
    //рекомендуется. Тогда компилятор проверит, что это действительно
    //переопределение.
}
