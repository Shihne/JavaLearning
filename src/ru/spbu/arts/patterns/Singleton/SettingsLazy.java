package ru.spbu.arts.patterns.Singleton;

public class SettingsLazy {
    //пример ленивого синглетона
    //это синглетон, который создает instance
    //(единственный объект класса) только при
    //первом запросе на этот объект.
    //Это нужно, если объект дорого создвать, а нужен
    //он далеко не всегда.

    private static SettingsLazy instance = null;

    private static SettingsLazy getInstance() {
        //создать объект, если он еще не создан
        if (instance == null)
            instance = new SettingsLazy();
        return instance;
    }

    private SettingsLazy() {
        //дорогое и долгое создание объекта
    }

    //SettingsLazy в использовании аналогичен Settings
    //но первый не создает объект, если объект не нужен.

    //такая реализация не потокобезопасна
    //для безопасности можно сделать synchronize и
    //двойную проверку, как была в обезьянках
    //либо можно сделать enum версию, см. интернет

    //Глобальные переменные, включая синглетоны,
    //усложняют логику программы (сложнее отлаживать)
    //и усложняют автоматическую отладку.
}
